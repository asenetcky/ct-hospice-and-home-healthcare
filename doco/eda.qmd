---
title: "Quick EDA"
author: "Alexander Senetcky"
format: html
---

## Small Slice of Data

Start off by grabbing small chunks of the data

```{r setup}
library(RSocrata)
library(dplyr)
library(stringr)
library(glue)
```

```{r data}
## credential types based on credential code
credential_types <- 
  RSocrata::read.socrata("https://data.ct.gov/resource/rykc-pttg.json")

## 
licenced_facilities <- 
  RSocrata::read.socrata("https://data.ct.gov/resource/ngch-56tr.json?$limit=10")

```

### Taking a Peek

```{r}
dplyr::glimpse(credential_types)
dplyr::glimpse(licenced_facilities)

```

```{r}
credential_types |> 
  mutate(across(everything(), str_to_lower)) |> 
  filter(credential %in% c("hospice", "home health care"))
```


It looks like Hospice is "HSPC" and "HHC"
Let's try and grab license data that is from 2024 onward.

```{r}
resource_url <- "https://data.ct.gov/resource/ngch-56tr.json"
where_clause <- 
  "?$where=expirationdate >= '2025-01-28' "
where_and <- "and credentialtype in('HHC', 'HSPC')"

target_data <- 
  RSocrata::read.socrata(url = glue::glue(resource_url, where_clause, where_and)) |> 
  dplyr::as_tibble()

```

Looks like we nabbed some rows. Let's see what we got.

```{r}
glimpse(target_data)
```

There's no metadata attached to any of the columns but I'm starting to get
a better grasp of the data looking at more current data. `status`, 
`statusreason`, and `active` look like other variables I can leverage to find
all the rows I'm looking for more easily.


lets try filtering on the active and facility types.

```{r}

new_where_clause <- "?$where=active = 1 " 
new_target_data <- 
  RSocrata::read.socrata(
    glue::glue(resource_url, new_where_clause, where_and)
  ) |> 
  dplyr::as_tibble()

glimpse(new_target_data)
  
```

looks to be some differences...

```{r}

target_data |> count(active)

target_data |> 
  filter(active == "0")
```

We likely only need the active then.

## Tidying Up

This looks good let's tidy these data up and make them map/presentation ready

```{r}

active_hspc_hhc <- 
  new_target_data |> 
  select(
    name,
    type,
    fullcredentialcode,
    credentialnumber,
    credential,
    status,
    issuedate,
    effectivedate,
    expirationdate,
    address,
    city,
    state,
    zip,
    recordrefreshedon
  ) |> 
  mutate(
    zip_plus_four = str_sub(zip, start = -4L),
    zip = str_sub(zip, end = -5L),
    across(
      c(name, type, status), str_to_title
    )
  ) |> 
  dplyr::relocate(
    recordrefreshedon, .after = zip_plus_four
  )
  
active_hspc_hhc
```

## Mapping

Next up we'll try geocoding and mapping.